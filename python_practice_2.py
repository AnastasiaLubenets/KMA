# -*- coding: utf-8 -*-
"""python_practice_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18B2wkGfY_XPk2HjYYG_YIMriLqURZJF-

# I. Змінні та памʼять.

1. Створити змінні, що посилаються на два цілих числа, що однакові за значенням, де значення належить проміжку від -5 до 256. Перевірте, чи будуть ці змінні рівні тільки за значенням або ж ще будуть посилатися на один і той самий обʼєкт в памʼяті? Наведіть код та дайте текстову відповідь нижче.
"""

a = 100
b = 100
print(id(a))
print(id(b))

"""*місце для текстової відповіді

2. За допомогою якої функції можна перевірити належність змінної до вказаного типу даних (напр. чи змінна True посилається на значення булевого та цілочисленого типу)?
"""

a = 100
print(isinstance(a, int))

"""# II. Цілі числа та числа з рухомою комою

3. Створити дві змінні, що посилаються на будь-які ціле число та число з рухомою комою та продемонструвати такі арифметичні операції: додавання, віднімання, ділення, множення, ділення без залишку, ділення по модулю, приведення до ступеню. Всі результати операцій вивести на екран.
"""

a = 10
b = 2.5
print(a + b)
print(a - b)
print(a / b)
print(a * b)
print(a // b)
print(a % b)
print(a ** b)

"""4. Використовуючи змінні з вправи 3, продемонструйте механізм явного перетворення типів, де числа з рухомою комою перетворюються на цілі числа. Також визначте змінну, що посилається на значення булевого типу і спробуйте явно привести її до цілого числа."""

a = 10
b = 2.5

# Перетворення типу float на int
a = int(a)
b = int(b)

print(a)
print(b)

# Визначення змінної, яка посилається на значення булевого типу
c = True
c = int(c)

print(c)

"""# IІІ. Рядки (String).

5. Створити пустий рядок двома різними способами.
"""

empty_string = ''

empty_string = str()

"""6. Створити рядок з апострофом. Зробити його сирим. Вивести обидва рядка на екран."""

apostrophe = ' \' '
r_apostrophe = r' \' '

print(string_with_apostrophe)
print(raw_string_with_apostrophe)

"""7. Створити змінну, що буде посилатися на Ваше прізвище латинкою. Створити форматований рядок, який буде мати вигляд "My surname is ______", де на місці нижніх підкреслень буде Ваше прізвище зі змінної."""

surname = "Lubenets"
formatted_string = f"My surname is {surname}"

print(formatted_string)

"""8. Маючи рядок "My dog is crazy." перетворити його на список ["my", "dog", "is", "crazy"]"""

text = "My dog is crazy."
word_list = text.split()

print(word_list)

"""# IV. Робота зі списками.

9. Створити список двома різними за синтаксисом способами. За допомогою вбудованої функції обчисліть довжину одного з них.
"""

list1 = [1, 2, 3, 4, 5, 6, 7]
list2 = list(range(1, 8))
length_of_list1 = len(list1)
print(length_of_list1)

"""10. Створіть два списка та за допомогою спеціального методу додайте другий з них в якості останнього елемента першого."""

list1 = [5, 8, 1]
list2 = [6, 2]

list1.append(list2)

print(list1)

"""11. Створіть список, де елементами цього списку також є списки. Отримай перший елемент з останнього рядка та виведи значення на екран."""

nested_list = [[1, 3, 3], [8, 3, 2], [4, 8]]

last_row = nested_list[-1]
first_element = last_row[0]

print("Перший елемент з останнього рядка", first_element_of_last_row)

"""12. Створіть список з десяти елементів різного типу. Отримайте всі елементи, окрім двох перших та двох останніх та збережіть їх в новій змінній."""

list = [10, 'twenty', 3.5, False, [50, 60], 'seventy', {'eighty': 80}, None, (90, 100), 'last']

new_list = list [2:-2]

print(new_list)

"""# V. Робота з кортежами.

14. Створити кортеж з один елементом.
"""

tuple = (42,)

"""15. Порівняйте список та кортеж. Назвіть схожості та відмінності, випадки використання.

Це два типи даних в Python, які дозволяють зберігати колекції об'єктів. Схожості між ними полягають у тому, що обидва можуть містити декілька значень, можуть індексуватися та підтримують використання зрізів.

Списки можна змінювати після створення, додавати, видаляти або змінювати елементи. Кортежі неможливо змінювати після створення. Крім того, синтаксис списків огорнутий квадратними дужками, тоді як кортежі - круглими.

Зазвичай списки використовуються там, де потрібна змінюваність даних, наприклад, для зберігання списків імен користувачів. Кортежі використовуються там, де потрібна немутабельність даних, як у випадку ключів у словниках або аргументів у функціях.

16. Створіть кортеж з 11ти елементів чисел з рухомою комою та отримайте кожен парний за індексом елемент в зворотньому порядку. Наприклад, маючи (1.2, 2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3, 9.3, 0.3), отримати (0.3, 8.3, 6.3, 4.3, 2.3). Результат збережіть в нову змінну та виведіть на екран.
"""

tuple = (1.2, 2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3, 9.3, 0.3, 11.3)

result = tuple[-1::-2]

print(result)

"""# VI. Множини (Set).

17. Створити множину без елементів. Після цого за допомогою методу додайте кілька різних елементів до множини. Чи множини є змінним типом даних?
"""

my_set = set
my_set.add(1)
my_set.add(2)
my_set.add(3)

print(my_set)

"""Так, множини є змінним типом

18. Створити множину, маючи список my_list = [1, 1, 2, 67, 67, 8, 9]. Пояснити, чому "зникли" деякі елементи.
"""

my_list = [1, 1, 2, 67, 67, 8, 9]
my_set = set(my_list)

print(my_set)

"""Деякі елементи можуть "зникнути", оскільки множини унікальні за своєю природою і не можуть містити дублюючихся значень. Python автоматично видаляє будь-які дублюючіся значення, залишаючи лише унікальні елементи.

19. Створіть дві множини. Продемонстуйте над ними операції: обʼєднання, різниці, пересічі та симетричної різниці. Використовуйте методи, що не змінюють множини, а створюють нові.
"""

# Створення двох множин
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

# Об'єднання множин
union_set = set1.union(set2)
print(union_set)

# Різниця множин
difference_set = set1.difference(set2)
print(difference_set)

# Пересічення множин
intersection_set = set1.intersection(set2)
print(intersection_set)

# Симетрична різниця множин
symmetric_difference_set = set1.symmetric_difference(set2)
print(symmetric_difference_set)

"""# VII. Словники (Dictionary).

20. Створіть пустий словник. До нього додайте чотири пари елементів такі, щоб їхні ключі були різних типів. Чи може список бути ключем? Чому?
"""

my_dict = {}

my_dict[1] = "Ключ цілочисельного типу"
my_dict["two"] = "Ключ рядкового типу"
my_dict[3.14] = "Ключ дробового типу"
my_dict[("key", "tuple")] = "Ключ кортежу"

print(my_dict)

"""Списки не можуть бути ключами у словнику. Ключі у словнику повинні бути хешованими, а також мають бути незмінними.

21. Створіть словник, де значенням в одній з пар теж буде словник, який теж має вкладений словник. Виведіть на екран значення, що міститься в словнику, що знаходиться на найнижчому рівні ієрархії вкладеності (найбільш внутрішній).
"""

# Створення вкладеного словника
nested_dict = {"outer_key": {"inner_key": {"innermost_key": "1"}}}

# Виведення значення з найбільш внутрішнього словника
innermost_value = nested_dict["outer_key"]["inner_key"]["innermost_key"]
print("Значення з найбільш внутрішнього словника:", innermost_value)

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""